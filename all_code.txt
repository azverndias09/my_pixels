import 'package:flutter/material.dart';

class AppThemes {
  static ThemeData lightTheme(String? gender) {
    final isFemale = gender == 'Female';
    final seedColor =
        isFemale
            ? Colors.pinkAccent
            : Colors.blueGrey; // BlueGrey for Male, PinkAccent for Female

    return ThemeData.light(useMaterial3: true).copyWith(
      colorScheme: _colorScheme(seedColor, isFemale),
      extensions: [_genderTheme(isFemale)],
      appBarTheme: _appBarTheme(isFemale),
      inputDecorationTheme: _inputDecorationTheme(isFemale),
      elevatedButtonTheme: _elevatedButtonTheme(seedColor),
      cardTheme: _cardTheme(),
      textTheme: _textTheme(),
      scaffoldBackgroundColor: isFemale ? Colors.pink[50] : Colors.blue[50],
    );
  }

  static ColorScheme _colorScheme(Color seedColor, bool isFemale) {
    return ColorScheme.fromSeed(
      seedColor: seedColor,
      brightness: Brightness.light,
    ).copyWith(
      surfaceVariant: isFemale ? Colors.pink[100]! : Colors.blue[100]!,
      onSurfaceVariant: isFemale ? Colors.pink[900]! : Colors.blue[900]!,
    );
  }

  static GenderTheme _genderTheme(bool isFemale) {
    return GenderTheme(
      isFemale: isFemale,
      accentColor:
          isFemale
              ? Colors.pinkAccent
              : Colors.blueGrey, // Correct color accents
      badgeColor: isFemale ? Colors.pink[400]! : Colors.blue[400]!,
      softBgColor:
          isFemale
              ? Colors.pink[50]!
              : Colors.blueGrey[50]!, // Background changes
    );
  }

  static AppBarTheme _appBarTheme(bool isFemale) {
    return AppBarTheme(
      backgroundColor: isFemale ? Colors.pink[50] : Colors.blue[50],
      titleTextStyle: TextStyle(
        color: isFemale ? Colors.pink[900] : Colors.blue[900],
        fontSize: 20,
        fontWeight: FontWeight.w600,
        letterSpacing: 0.5,
      ),
      iconTheme: IconThemeData(
        color: isFemale ? Colors.pink[900] : Colors.blue[900],
      ),
      elevation: 0,
      centerTitle: true,
    );
  }

  static InputDecorationTheme _inputDecorationTheme(bool isFemale) {
    return InputDecorationTheme(
      border: const OutlineInputBorder(
        borderRadius: BorderRadius.all(Radius.circular(12)),
      ),
      contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 14),
      filled: true,
      fillColor:
          isFemale
              ? Colors.pink[50]!
              : Colors.blueGrey[50]!, // Consistency with background colors
      iconColor:
          isFemale ? Colors.pink : Colors.blueGrey, // Gender-based icon color
    );
  }

  static ElevatedButtonThemeData _elevatedButtonTheme(Color seedColor) {
    return ElevatedButtonThemeData(
      style: ElevatedButton.styleFrom(
        backgroundColor: seedColor,
        foregroundColor: Colors.white,
        padding: const EdgeInsets.symmetric(vertical: 16),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
        elevation: 2,
      ),
    );
  }

  static CardTheme _cardTheme() {
    return const CardTheme(
      elevation: 2,
      margin: EdgeInsets.all(8),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.all(Radius.circular(12)),
      ),
    );
  }

  static TextTheme _textTheme() {
    return const TextTheme(
      displayLarge: TextStyle(
        fontSize: 28,
        fontWeight: FontWeight.bold,
        letterSpacing: 0.5,
      ),
      displayMedium: TextStyle(
        fontSize: 24,
        fontWeight: FontWeight.bold,
        letterSpacing: 0.5,
      ),
      headlineSmall: TextStyle(
        fontSize: 20,
        fontWeight: FontWeight.bold,
        letterSpacing: 0.5,
      ),
      bodyLarge: TextStyle(fontSize: 16, letterSpacing: 0.25),
      bodyMedium: TextStyle(fontSize: 14, letterSpacing: 0.25),
    );
  }
}

class GenderTheme extends ThemeExtension<GenderTheme> {
  final bool isFemale;
  final Color accentColor;
  final Color badgeColor;
  final Color softBgColor;

  GenderTheme({
    required this.isFemale,
    required this.accentColor,
    required this.badgeColor,
    required this.softBgColor,
  });

  @override
  ThemeExtension<GenderTheme> copyWith({
    bool? isFemale,
    Color? accentColor,
    Color? badgeColor,
    Color? softBgColor,
  }) {
    return GenderTheme(
      isFemale: isFemale ?? this.isFemale,
      accentColor: accentColor ?? this.accentColor,
      badgeColor: badgeColor ?? this.badgeColor,
      softBgColor: softBgColor ?? this.softBgColor,
    );
  }

  @override
  ThemeExtension<GenderTheme> lerp(
    covariant ThemeExtension<GenderTheme>? other,
    double t,
  ) {
    if (other is! GenderTheme) return this;
    return GenderTheme(
      isFemale: other.isFemale,
      accentColor: Color.lerp(accentColor, other.accentColor, t)!,
      badgeColor: Color.lerp(badgeColor, other.badgeColor, t)!,
      softBgColor: Color.lerp(softBgColor, other.softBgColor, t)!,
    );
  }
}
import 'dart:io';

class GalleryImage {
  final String id;
  final File file;
  final DateTime createdAt;

  GalleryImage({required this.id, required this.file, required this.createdAt});

  // Add serialization methods
  Map<String, dynamic> toJson() => {
    'id': id,
    'path': file.path,
    'createdAt': createdAt.toIso8601String(),
  };

  factory GalleryImage.fromJson(Map<String, dynamic> json) => GalleryImage(
    id: json['id'],
    file: File(json['path']),
    createdAt: DateTime.parse(json['createdAt']),
  );
}
class AppUser {
  final String name;
  final String email;
  final String gender;
  final String password;
  AppUser({
    required this.password,
    required this.name,
    required this.email,
    required this.gender,
  });
}
import 'package:flutter/material.dart';

class AuthProvider extends ChangeNotifier {
  bool isAuthenticated = false;

  void login(String email, String password) {
    isAuthenticated = true;
    notifyListeners();
  }

  void logout() {
    isAuthenticated = false;
    notifyListeners();
  }
}
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:my_pixels/data/models/gallery_image.dart';
import 'package:shared_preferences/shared_preferences.dart';

class GalleryProvider with ChangeNotifier {
  List<GalleryImage> _images = [];
  // static const int maxImages = 10;
  static const String _storageKey = 'gallery_images';
  List<GalleryImage> get images => _images;
  Future<void> loadImages() async {
    final prefs = await SharedPreferences.getInstance();
    final jsonString = prefs.getString(_storageKey);
    if (jsonString != null) {
      _images =
          (jsonDecode(jsonString) as List)
              .map((e) => GalleryImage.fromJson(e))
              .toList();
    }
  }

  void reorderImages(int oldI, int newI) {
    if (oldI == newI) return;
    final img = _images.removeAt(oldI);
    _images.insert(newI, img);
    notifyListeners();
  }

  Future<void> _persistImages() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_storageKey, jsonEncode(_images));
  }

  // Call _persistImages() after every mutation
  void addImage(GalleryImage image) {
    _images.add(image);
    _persistImages();
    notifyListeners();
  }

  void removeImage(int index) {
    _images.removeAt(index);
    notifyListeners();
  }

  void replaceImage(int index, GalleryImage newImage) {
    _images[index] = newImage;
    notifyListeners();
  }
}
import 'package:flutter/foundation.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:my_pixels/models/user_model.dart';
import 'package:shared_preferences/shared_preferences.dart';

class UserProvider with ChangeNotifier {
  final _storage = FlutterSecureStorage();
  AppUser? _user;
  AppUser? get user => _user;

  Future<void> initialize() async {
    final prefs = await SharedPreferences.getInstance(); // ✅ fetch here
    final name = prefs.getString('name');
    final email = prefs.getString('email');
    final gender = prefs.getString('gender');

    if (email != null) {
      _user = AppUser(
        name: name ?? '',
        email: email,
        gender: gender ?? 'Male',
        password: '',
      );
      notifyListeners();
    }
  }

  Future<void> loginUser(AppUser user) async {
    _user = user;
    final prefs = await SharedPreferences.getInstance(); // ✅ fetch here
    await prefs.setString('name', user.name);
    await prefs.setString('email', user.email);
    await prefs.setString('gender', user.gender);
    // Store password securely
    await _storage.write(key: 'password', value: user.password);
    notifyListeners();
  }
}
import 'package:go_router/go_router.dart';

import '../screens/splash_screen.dart';
import '../screens/auth/login_screen.dart';
import '../screens/auth/signup_screen.dart';
import '../screens/gallery/gallery_screen.dart';

final GoRouter appRouter = GoRouter(
  initialLocation: '/',
  routes: [
    GoRoute(path: '/', builder: (_, __) => const SignupScreen()),
    GoRoute(path: '/login', builder: (_, __) => const LoginScreen()),
    GoRoute(path: '/signup', builder: (_, __) => const SignupScreen()),
    GoRoute(path: '/gallery', builder: (_, __) => const GalleryScreen()),
  ],
);
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';
import 'package:flutter_animate/flutter_animate.dart';

import '../../providers/auth_provider.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();

  void _handleLogin() {
    if (_formKey.currentState!.validate()) {
      context.read<AuthProvider>().login(
        _emailController.text,
        _passwordController.text,
      );
      context.go('/gallery');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Padding(
        padding: const EdgeInsets.all(20),
        child: Form(
          key: _formKey,
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              TextFormField(
                controller: _emailController,
                decoration: const InputDecoration(labelText: 'Email'),
                validator:
                    (value) => value!.contains('@') ? null : 'Invalid email',
              ).animate().fadeIn(delay: 100.ms),
              const SizedBox(height: 20),
              TextFormField(
                controller: _passwordController,
                obscureText: true,
                decoration: const InputDecoration(labelText: 'Password'),
                validator:
                    (value) => value!.length >= 6 ? null : 'Min 6 characters',
              ).animate().fadeIn(delay: 200.ms),
              const SizedBox(height: 30),
              FilledButton(
                onPressed: _handleLogin,
                child: const Text('Login'),
              ).animate().fadeIn(delay: 300.ms),
              TextButton(
                onPressed: () => context.go('/signup'),
                child: const Text('Create Account'),
              ).animate().fadeIn(delay: 400.ms),
            ],
          ),
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:my_pixels/core/app_themes.dart';
import 'package:provider/provider.dart';

import '../../models/user_model.dart';
import '../../providers/user_provider.dart';

class SignupScreen extends StatefulWidget {
  const SignupScreen({super.key});

  @override
  State<SignupScreen> createState() => _SignupScreenState();
}

class _SignupScreenState extends State<SignupScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  String _gender = 'Male'; // Male by default
  bool _isSubmitting = false;

  @override
  void dispose() {
    _nameController.dispose();
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  Future<void> _submit() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isSubmitting = true);

    try {
      final user = AppUser(
        name: _nameController.text.trim(),
        email: _emailController.text.trim(),
        gender: _gender,
        password: '',
      );

      await context.read<UserProvider>().loginUser(user);
      if (mounted) context.go('/gallery');
    } finally {
      if (mounted) setState(() => _isSubmitting = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    // Get the theme based on gender
    final localTheme = AppThemes.lightTheme(_gender);
    final genderTheme = localTheme.extension<GenderTheme>()!;

    return Theme(
      data: localTheme, // Apply the gender-specific theme here
      child: Scaffold(
        appBar: AppBar(title: const Text('Create Account'), centerTitle: true),
        body: SingleChildScrollView(
          padding: const EdgeInsets.all(24),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              // Header with logo/icon
              Column(
                children: [
                  Container(
                    width: 120,
                    height: 120,
                    decoration: BoxDecoration(
                      color:
                          genderTheme
                              .softBgColor, // background color based on gender
                      shape: BoxShape.circle,
                    ),
                    child: Icon(
                      _gender == 'Female' ? Icons.female : Icons.male,
                      size: 60,
                      color: genderTheme.accentColor, // icon color
                    ),
                  ),
                  const SizedBox(height: 16),
                  Text(
                    'My Pixels',
                    style: localTheme.textTheme.headlineSmall?.copyWith(
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'Personalize your pictures one click a time :)',
                    style: localTheme.textTheme.bodyMedium?.copyWith(
                      color: localTheme.colorScheme.onSurface.withOpacity(0.7),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 32),
              Form(
                key: _formKey,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    // Full Name Field
                    Text(
                      'Full Name',
                      style: localTheme.textTheme.bodyMedium?.copyWith(
                        color:
                            genderTheme
                                .accentColor, // Label color based on gender
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    TextFormField(
                      controller: _nameController,
                      style: TextStyle(
                        color: genderTheme.accentColor,
                      ), // Text color for input
                      decoration: InputDecoration(
                        prefixIcon: Icon(
                          Icons.person_outline,
                          color: genderTheme.accentColor,
                        ), // Icon color
                        hintText: 'Enter your name',
                        hintStyle: TextStyle(
                          color: genderTheme.accentColor.withOpacity(0.3),
                        ), // Placeholder color
                        enabledBorder: OutlineInputBorder(
                          borderSide: BorderSide(
                            color: genderTheme.accentColor.withOpacity(0.3),
                          ),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderSide: BorderSide(
                            color: genderTheme.accentColor,
                          ),
                        ),
                      ),
                      validator: (v) => v!.isEmpty ? 'Required' : null,
                    ),
                    const SizedBox(height: 16),

                    // Email Field
                    Text(
                      'Email Address',
                      style: localTheme.textTheme.bodyMedium?.copyWith(
                        color:
                            genderTheme
                                .accentColor, // Label color based on gender
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    TextFormField(
                      controller: _emailController,
                      style: TextStyle(
                        color: genderTheme.accentColor,
                      ), // Text color for input
                      decoration: InputDecoration(
                        prefixIcon: Icon(
                          Icons.email_outlined,
                          color: genderTheme.accentColor,
                        ), // Icon color
                        hintText: 'Enter your email',
                        hintStyle: TextStyle(
                          color: genderTheme.accentColor.withOpacity(0.3),
                        ), // Placeholder color
                        enabledBorder: OutlineInputBorder(
                          borderSide: BorderSide(
                            color: genderTheme.accentColor.withOpacity(0.3),
                          ),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderSide: BorderSide(
                            color: genderTheme.accentColor,
                          ),
                        ),
                      ),
                      keyboardType: TextInputType.emailAddress,
                      validator:
                          (v) => v!.contains('@') ? null : 'Invalid email',
                    ),
                    const SizedBox(height: 16),

                    // Password Field
                    Text(
                      'Password',
                      style: localTheme.textTheme.bodyMedium?.copyWith(
                        color:
                            genderTheme
                                .accentColor, // Label color based on gender
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    TextFormField(
                      controller: _passwordController,
                      obscureText: true,
                      style: TextStyle(
                        color: genderTheme.accentColor,
                      ), // Text color for input
                      decoration: InputDecoration(
                        prefixIcon: Icon(
                          Icons.lock_outline,
                          color: genderTheme.accentColor,
                        ), // Icon color
                        hintText: 'Enter your password',
                        hintStyle: TextStyle(
                          color: genderTheme.accentColor.withOpacity(0.3),
                        ), // Placeholder color
                        enabledBorder: OutlineInputBorder(
                          borderSide: BorderSide(
                            color: genderTheme.accentColor.withOpacity(0.3),
                          ),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderSide: BorderSide(
                            color: genderTheme.accentColor,
                          ),
                        ),
                      ),
                      validator:
                          (v) => v!.length >= 6 ? null : 'Minimum 6 characters',
                    ),
                    const SizedBox(height: 16),

                    // Gender Selector
                    Text(
                      'Gender',
                      style: localTheme.textTheme.bodyMedium?.copyWith(
                        color:
                            genderTheme
                                .accentColor, // Label color based on gender
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    DropdownButtonFormField<String>(
                      value: _gender,
                      style: TextStyle(
                        color: genderTheme.accentColor,
                      ), // Text color for dropdown selection
                      decoration: InputDecoration(
                        prefixIcon: Icon(
                          Icons.person_outline,
                          color: genderTheme.accentColor,
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderSide: BorderSide(
                            color: genderTheme.accentColor.withOpacity(0.3),
                          ),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderSide: BorderSide(
                            color: genderTheme.accentColor,
                          ),
                        ),
                      ),
                      items: const [
                        DropdownMenuItem(value: 'Male', child: Text('Male')),
                        DropdownMenuItem(
                          value: 'Female',
                          child: Text('Female'),
                        ),
                      ],
                      onChanged: (v) => setState(() => _gender = v!),
                    ),
                    const SizedBox(height: 32),

                    // Sign Up Button
                    ElevatedButton(
                      onPressed: _isSubmitting ? null : _submit,
                      child:
                          _isSubmitting
                              ? const SizedBox(
                                width: 20,
                                height: 20,
                                child: CircularProgressIndicator(
                                  strokeWidth: 2,
                                  color: Colors.white,
                                ),
                              )
                              : const Text('Create Account'),
                    ),
                    const SizedBox(height: 16),

                    // Already have account
                    Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Text(
                          'Already have an account? ',
                          style: localTheme.textTheme.bodyMedium,
                        ),
                        TextButton(
                          onPressed: () => context.go('/login'),
                          child: Text(
                            'Sign In',
                            style: localTheme.textTheme.bodyMedium?.copyWith(
                              fontWeight: FontWeight.bold,
                              color: genderTheme.accentColor,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:my_pixels/providers/user_provider.dart';
import 'package:my_pixels/models/user_model.dart';

class EditProfileScreen extends StatefulWidget {
  const EditProfileScreen({super.key});
  @override
  State<EditProfileScreen> createState() => _EditProfileScreenState();
}

class _EditProfileScreenState extends State<EditProfileScreen> {
  late TextEditingController _nameCtl;
  late TextEditingController _emailCtl;
  String _gender = 'Male';
  bool _saving = false;

  @override
  void initState() {
    super.initState();
    final user = context.read<UserProvider>().user;
    _nameCtl = TextEditingController(text: user?.name ?? '');
    _emailCtl = TextEditingController(text: user?.email ?? '');
    _gender = user?.gender ?? 'Male';
  }

  @override
  void dispose() {
    _nameCtl.dispose();
    _emailCtl.dispose();
    super.dispose();
  }

  Future<void> _save() async {
    setState(() => _saving = true);
    final provider = context.read<UserProvider>();
    // re-use existing password from secure storage if you want
    final newUser = AppUser(
      name: _nameCtl.text.trim(),
      email: _emailCtl.text.trim(),
      gender: _gender,
      password: provider.user?.password ?? '',
    );
    await provider.loginUser(newUser);
    setState(() => _saving = false);
    Navigator.pop(context);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Edit Profile')),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            TextField(
              controller: _nameCtl,
              decoration: const InputDecoration(labelText: 'Name'),
            ),
            const SizedBox(height: 12),
            TextField(
              controller: _emailCtl,
              decoration: const InputDecoration(labelText: 'Email'),
            ),
            const SizedBox(height: 12),
            DropdownButtonFormField<String>(
              value: _gender,
              items: const [
                DropdownMenuItem(value: 'Male', child: Text('Male')),
                DropdownMenuItem(value: 'Female', child: Text('Female')),
              ],
              onChanged: (v) => setState(() => _gender = v!),
              decoration: const InputDecoration(labelText: 'Gender'),
            ),
            const Spacer(),
            ElevatedButton(
              onPressed: _saving ? null : _save,
              child:
                  _saving
                      ? const CircularProgressIndicator()
                      : const Text('Save'),
            ),
          ],
        ),
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:go_router/go_router.dart';
import 'package:my_pixels/core/app_themes.dart';
import 'package:my_pixels/data/models/gallery_image.dart';
import 'package:my_pixels/models/user_model.dart';
// Assuming User is defined here
import 'package:my_pixels/providers/auth_provider.dart';
import 'package:my_pixels/providers/gallery_provider.dart';
import 'package:my_pixels/providers/user_provider.dart';
import 'package:my_pixels/screens/gallery/edit_profile_screen.dart';
import 'package:my_pixels/screens/gallery/image_preview_screen.dart';
import 'package:my_pixels/screens/gallery/upload_screen.dart';
import 'package:my_pixels/widgets/gender_badge.dart';
import 'package:provider/provider.dart';
import 'package:reorderables/reorderables.dart';

class GalleryScreen extends StatelessWidget {
  const GalleryScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final user = context.watch<UserProvider>().user;
    final genderTheme = Theme.of(context).extension<GenderTheme>()!;

    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'My Gallery',
        ).animate().fadeIn(duration: 500.ms).slideX(begin: -0.2),
        centerTitle: true,
        elevation: 0,
        backgroundColor: Colors.transparent,
        flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(
              colors: [
                genderTheme.softBgColor,
                genderTheme.softBgColor.withOpacity(0.9),
              ],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ),
          ),
        ),
        actions: [
          IconButton(
                icon: Icon(Icons.add_a_photo, color: genderTheme.accentColor),
                onPressed: () => _navigateToUpload(context),
              )
              .animate(
                delay: 300.ms,
                onPlay: (controller) => controller.repeat(),
              )
              .shake(hz: 2, curve: Curves.easeInOut)
              .scale(end: Offset(1.1, 1.1)),
        ],
      ),
      drawer: _buildModernDrawer(context, user, genderTheme),
      body: Container(
        decoration: BoxDecoration(
          gradient: RadialGradient(
            center: Alignment.topLeft,
            radius: 1.5,
            colors: [
              genderTheme.softBgColor.withOpacity(0.2),
              genderTheme.softBgColor.withOpacity(0.05),
            ],
          ),
        ),
        child: Consumer<GalleryProvider>(
          builder: (ctx, gallery, _) {
            return Padding(
              padding: const EdgeInsets.all(8),
              child: ReorderableWrap(
                crossAxisAlignment: WrapCrossAlignment.center,
                spacing: 8,
                runSpacing: 8,
                alignment: WrapAlignment.center,
                onReorder: gallery.reorderImages,
                children: [
                  for (int i = 0; i < gallery.images.length; i++)
                    _buildAnimatedImageTile(
                          context,
                          gallery.images[i],
                          i,
                          user?.gender,
                        )
                        .animate()
                        .fadeIn(delay: (i * 100).ms)
                        .scale(begin: Offset(0.8, 0.8), end: Offset(1, 1)),
                ],
              ),
            );
          },
        ),
      ),
    );
  }

  Widget _buildAnimatedImageTile(
    BuildContext context,
    GalleryImage image,
    int index,
    String? gender,
  ) {
    final genderTheme = Theme.of(context).extension<GenderTheme>()!;

    return SizedBox(
      key: ValueKey(image.id),
      width: (MediaQuery.of(context).size.width - 24) / 2,
      height: (MediaQuery.of(context).size.height - 200) / 3,
      child: MouseRegion(
        cursor: SystemMouseCursors.click,
        child: GestureDetector(
          onTap: () => _showFullScreenPreview(context, index),
          child: Padding(
            padding: const EdgeInsets.all(4.0),
            child: AnimatedContainer(
              duration: 300.ms,
              curve: Curves.easeInOut,
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(24),
                boxShadow: [
                  BoxShadow(
                    color: genderTheme.accentColor.withOpacity(0.2),
                    blurRadius: 12,
                    spreadRadius: 2,
                    offset: const Offset(0, 4),
                  ),
                ],
              ),
              child: ClipRRect(
                borderRadius: BorderRadius.circular(20),
                child: Stack(
                  children: [
                    Hero(
                      tag: image.id,
                      child: Image.file(image.file, fit: BoxFit.cover),
                    ),
                    Positioned.fill(
                      child: Container(
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            begin: Alignment.topCenter,
                            end: Alignment.bottomCenter,
                            colors: [
                              Colors.transparent,
                              Colors.black.withOpacity(0.4),
                            ],
                          ),
                        ),
                      ),
                    ),
                    if (index == 0)
                      Positioned(
                        top: 12,
                        right: 12,
                        child: GenderBadge(
                          gender: gender,
                        ).animate().scale(delay: 500.ms),
                      ),
                    Positioned(
                      bottom: 12,
                      left: 12,
                      child: Text(
                        '${index + 1}',
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          shadows: [
                            Shadow(
                              color: Colors.black.withOpacity(0.5),
                              blurRadius: 4,
                              offset: const Offset(1, 1),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  Drawer _buildModernDrawer(
    BuildContext context,
    AppUser? user,
    GenderTheme genderTheme,
  ) {
    return Drawer(
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.horizontal(right: Radius.circular(24)),
      ),
      child: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [
              genderTheme.softBgColor.withOpacity(0.9),
              genderTheme.softBgColor.withOpacity(0.7),
            ],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: Column(
          children: [
            UserAccountsDrawerHeader(
              decoration: BoxDecoration(
                borderRadius: const BorderRadius.only(
                  bottomRight: Radius.circular(24),
                ),
                gradient: LinearGradient(
                  colors: [
                    genderTheme.accentColor.withOpacity(0.8),
                    genderTheme.accentColor.withOpacity(0.4),
                  ],
                ),
              ),
              accountName: Text(
                user?.name ?? '—',
                style: const TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
              ),
              accountEmail: Text(user?.email ?? '—'),
              currentAccountPicture: GenderBadge(
                gender: user?.gender,
              ).animate().scale(delay: 200.ms),
            ),
            ..._buildDrawerItems(context, genderTheme),
          ],
        ),
      ),
    );
  }

  List<Widget> _buildDrawerItems(
    BuildContext context,
    GenderTheme genderTheme,
  ) {
    return [
      _buildDrawerTile(
        context,
        icon: Icons.edit,
        label: 'Edit Profile',
        onTap: () {
          Navigator.pop(context);
          Navigator.push(
            context,
            MaterialPageRoute(builder: (_) => const EditProfileScreen()),
          );
        },
        color: genderTheme.accentColor,
      ),
      const Spacer(),
      _buildDrawerTile(
        context,
        icon: Icons.logout,
        label: 'Log out',
        onTap: () {
          context.read<AuthProvider>().logout();
          Navigator.pop(context);
          context.go('/login');
        },
        color: Colors.redAccent,
      ),
    ];
  }

  Widget _buildDrawerTile(
    BuildContext context, {
    required IconData icon,
    required String label,
    required VoidCallback onTap,
    required Color color,
  }) {
    return ListTile(
      leading: Icon(icon, color: color),
      title: Text(label, style: TextStyle(color: color)),
      onTap: onTap,
      hoverColor: color.withOpacity(0.1),
      splashColor: color.withOpacity(0.2),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
    );
  }

  void _showFullScreenPreview(BuildContext context, int index) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder:
            (_) => ImagePreviewScreen(
              imageIndex: index,
              onDelete: () => _confirmDelete(context, index),
              onEdit: () => _navigateToUpload(context, index: index),
            ),
      ),
    );
  }

  void _confirmDelete(BuildContext context, int index) {
    showDialog(
      context: context,
      builder:
          (_) => AlertDialog(
            title: const Text('Delete Image?'),
            content: const Text('This action cannot be undone'),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('Cancel'),
              ),
              TextButton(
                onPressed: () {
                  Provider.of<GalleryProvider>(
                    context,
                    listen: false,
                  ).removeImage(index);
                  Navigator.pop(context);
                  Navigator.pop(context);
                },
                child: const Text(
                  'Delete',
                  style: TextStyle(color: Colors.red),
                ),
              ),
            ],
          ),
    );
  }

  void _navigateToUpload(BuildContext context, {int? index}) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => UploadScreen(editIndex: index),
        fullscreenDialog: true,
      ),
    );
  }
}
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_cropper/image_cropper.dart';
import 'package:image_picker/image_picker.dart';
import 'package:my_pixels/data/models/gallery_image.dart';
import 'package:provider/provider.dart';
import '../../providers/gallery_provider.dart';
import 'package:my_pixels/core/app_themes.dart';

class ImageEditorScreen extends StatefulWidget {
  final int? editIndex;

  const ImageEditorScreen({super.key, this.editIndex});

  @override
  State<ImageEditorScreen> createState() => _ImageEditorScreenState();
}

class _ImageEditorScreenState extends State<ImageEditorScreen> {
  File? _image;
  bool _isLoading = false;
  String? _errorMessage;
  final _picker = ImagePicker();

  @override
  void initState() {
    super.initState();
    if (widget.editIndex != null) {
      final existingImage =
          context.read<GalleryProvider>().images[widget.editIndex!];
      _image = existingImage.file;
    }
  }

  Future<void> _pickImage() async {
    try {
      setState(() {
        _isLoading = true;
        _errorMessage = null;
      });

      final picked = await _picker.pickImage(source: ImageSource.gallery);
      if (picked == null) return;

      final cropped = await ImageCropper().cropImage(
        sourcePath: picked.path,
        aspectRatio: const CropAspectRatio(ratioX: 1, ratioY: 1),
        uiSettings: [
          AndroidUiSettings(
            toolbarTitle: 'Crop Image',
            toolbarColor: Theme.of(context).primaryColor,
            toolbarWidgetColor: Colors.white,
          ),
        ],
      );

      if (cropped != null) {
        setState(() => _image = File(cropped.path));
      }
    } catch (e) {
      setState(() => _errorMessage = 'Failed to select or crop image.');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  void _saveImage() {
    if (_image == null) return;

    final galleryProvider = context.read<GalleryProvider>();

    if (widget.editIndex != null) {
      final updatedImage = GalleryImage(
        id: galleryProvider.images[widget.editIndex!].id,
        file: _image!,
        createdAt: galleryProvider.images[widget.editIndex!].createdAt,
      );
      galleryProvider.replaceImage(widget.editIndex!, updatedImage);
    } else {
      final newImage = GalleryImage(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        file: _image!,
        createdAt: DateTime.now(),
      );
      galleryProvider.addImage(newImage);
    }

    Navigator.pop(context);
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final genderTheme = theme.extension<GenderTheme>();

    if (genderTheme == null) {
      return Scaffold(
        appBar: AppBar(title: const Text('Add/Edit Image')),
        body: const Center(child: Text('Error: Gender theme not found')),
      );
    }

    return Scaffold(
      backgroundColor: genderTheme.accentColor.withOpacity(0.1),
      appBar: AppBar(
        title: Text(widget.editIndex != null ? 'Edit Image' : 'Add New Image'),
        actions: [
          if (_image != null && !_isLoading)
            IconButton(icon: const Icon(Icons.check), onPressed: _saveImage),
        ],
      ),
      body: Center(
        child: ConstrainedBox(
          constraints: const BoxConstraints(maxWidth: 400),
          child:
              _isLoading
                  ? const CircularProgressIndicator()
                  : Column(
                    children: [
                      Expanded(
                        child: Padding(
                          padding: const EdgeInsets.all(20),
                          child:
                              _image != null
                                  ? ClipRRect(
                                    borderRadius: BorderRadius.circular(16),
                                    child: Image.file(
                                      _image!,
                                      fit: BoxFit.cover,
                                    ),
                                  )
                                  : _buildPlaceholder(),
                        ),
                      ),
                      if (_errorMessage != null)
                        Padding(
                          padding: const EdgeInsets.symmetric(horizontal: 20),
                          child: Text(
                            _errorMessage!,
                            style: const TextStyle(color: Colors.red),
                          ),
                        ),
                      _buildControlBar(),
                    ],
                  ),
        ),
      ),
    );
  }

  Widget _buildPlaceholder() {
    return GestureDetector(
      onTap: _pickImage,
      child: Container(
        decoration: BoxDecoration(
          border: Border.all(color: Colors.grey.shade300),
          borderRadius: BorderRadius.circular(16),
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.photo_library, size: 50),
            const SizedBox(height: 10),
            Text(
              'Tap to select image',
              style: TextStyle(color: Colors.grey.shade600),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildControlBar() {
    return Padding(
      padding: const EdgeInsets.all(20),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        children: [
          FilledButton.icon(
            icon: const Icon(Icons.photo_library),
            label: const Text('Gallery'),
            onPressed: _pickImage,
          ),
          if (_image != null)
            FilledButton.icon(
              icon: const Icon(Icons.refresh),
              label: const Text('Retry'),
              onPressed: () => setState(() => _image = null),
            ),
        ],
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:my_pixels/providers/gallery_provider.dart';
import 'package:provider/provider.dart';

class ImagePreviewScreen extends StatelessWidget {
  final int imageIndex;
  final VoidCallback onDelete;
  final VoidCallback onEdit;

  const ImagePreviewScreen({
    super.key,
    required this.imageIndex,
    required this.onDelete,
    required this.onEdit,
  });
  @override
  Widget build(BuildContext context) {
    final galleryProvider = Provider.of<GalleryProvider>(context);
    final images = galleryProvider.images;

    int safeIndex = imageIndex; // Create a local mutable copy

    if (safeIndex >= images.length) {
      if (images.isEmpty) {
        Navigator.of(context).pop(); // No images left, go back
        return const SizedBox(); // Empty widget after pop
      }
      safeIndex = images.length - 1; // Fallback to last valid index
    }

    final image = images[safeIndex];

    return Scaffold(
      backgroundColor: Colors.black,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: Center(
        child: Hero(
          tag: image.id,
          child: Image.file(image.file, fit: BoxFit.contain),
        ),
      ),
      bottomNavigationBar: Container(
        height: 80,
        color: Colors.black.withOpacity(0.7),
        padding: const EdgeInsets.symmetric(horizontal: 32),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            _buildActionButton(
              icon: Icons.edit,
              label: 'Edit',
              onPressed: onEdit,
            ),
            _buildActionButton(
              icon: Icons.delete,
              label: 'Delete',
              onPressed: onDelete,
              isDestructive: true,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildActionButton({
    required IconData icon,
    required String label,
    required VoidCallback onPressed,
    bool isDestructive = false,
  }) {
    return TextButton.icon(
      icon: Icon(icon, color: isDestructive ? Colors.red : Colors.white),
      label: Text(
        label,
        style: TextStyle(color: isDestructive ? Colors.red : Colors.white),
      ),
      onPressed: onPressed,
    );
  }
}
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:my_pixels/data/models/gallery_image.dart';
import 'package:my_pixels/widgets/gender_badge.dart';

class ImageTile extends StatelessWidget {
  final GalleryImage image;
  final int index;
  final String gender;
  final bool isExpanded;
  final VoidCallback onDelete;
  final VoidCallback onEdit;
  final VoidCallback onTap;

  const ImageTile({
    super.key,
    required this.image,
    required this.index,
    required this.gender,
    required this.isExpanded,
    required this.onDelete,
    required this.onEdit,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: onTap,
      child: Stack(
        children: [
          // Main Image Content
          Hero(
            tag: image.id,
            child: ClipRRect(
              borderRadius: BorderRadius.circular(16),
              child: Image.file(image.file, fit: BoxFit.cover),
            ),
          ),

          // Gender Badge for first image
          // if (index == 0)
          //   const Positioned(
          //     top: 8,
          //     right: 8,
          //     child: GenderBadge(gender),
          //   ),

          // Edit/Delete Options when expanded
          if (isExpanded)
            Container(
              decoration: BoxDecoration(
                borderRadius: BorderRadius.circular(16),
                color: Colors.black54,
              ),
              child: Center(
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    // Edit Button
                    IconButton(
                      icon: const Icon(Icons.edit, color: Colors.white),
                      onPressed: () {
                        HapticFeedback.lightImpact();
                        onEdit();
                      },
                    ),

                    // Delete Button
                    IconButton(
                      icon: const Icon(Icons.delete, color: Colors.white),
                      onPressed: () {
                        HapticFeedback.heavyImpact();
                        onDelete();
                      },
                    ),
                  ],
                ),
              ),
            ),
        ],
      ),
    );
  }
}
// Compare this snippet from my_pixels
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:image_cropper/image_cropper.dart';
import 'package:my_pixels/core/app_themes.dart';
import 'package:my_pixels/data/models/gallery_image.dart';
import 'package:my_pixels/providers/gallery_provider.dart';
import 'package:my_pixels/providers/user_provider.dart';
import 'package:provider/provider.dart';

class UploadScreen extends StatefulWidget {
  final int? editIndex;
  const UploadScreen({super.key, this.editIndex});

  @override
  State<UploadScreen> createState() => _UploadScreenState();
}

class _UploadScreenState extends State<UploadScreen> {
  File? _image;
  bool _isLoading = false;
  bool _initialPickAttempted = false;

  @override
  void initState() {
    super.initState();
    // Auto-trigger image selection when screen loads
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (widget.editIndex == null) _pickAndCropImage();
    });
  }

  Future<void> _pickAndCropImage() async {
    final picked = await ImagePicker().pickImage(source: ImageSource.gallery);
    if (picked == null) {
      Navigator.pop(context);
      return;
    }

    final genderTheme = Theme.of(context).extension<GenderTheme>();
    final theme = Theme.of(context);

    final croppedFile = await ImageCropper().cropImage(
      sourcePath: picked.path,
      aspectRatio: const CropAspectRatio(ratioX: 1, ratioY: 1),
      uiSettings: [
        AndroidUiSettings(
          toolbarTitle: 'Crop Your Image',
          toolbarColor: genderTheme?.accentColor ?? theme.primaryColor,
          toolbarWidgetColor: theme.colorScheme.onPrimary,
          activeControlsWidgetColor: genderTheme?.badgeColor,
          backgroundColor: genderTheme?.softBgColor,
          statusBarColor: genderTheme?.accentColor,
          dimmedLayerColor: Colors.black54,
          initAspectRatio: CropAspectRatioPreset.original,
          lockAspectRatio: true,
          showCropGrid: false,
          cropFrameColor: genderTheme?.accentColor ?? Colors.white,
          cropGridColor:
              genderTheme?.badgeColor?.withOpacity(0.4) ?? Colors.white60,
          hideBottomControls: false,
          cropFrameStrokeWidth: 2,
        ),
        IOSUiSettings(
          title: 'Crop Image',
          aspectRatioLockEnabled: true,
          aspectRatioPickerButtonHidden: true,
          resetButtonHidden: true,
          rotateButtonsHidden: false,
          rotateClockwiseButtonHidden: true,
          doneButtonTitle: 'Done',
          cancelButtonTitle: 'Cancel',
          // NO titleFontColor, toolbarHeight, tooltipColor
        ),
      ],
    );

    if (croppedFile == null) {
      Navigator.pop(context);
      return;
    }

    setState(() => _image = File(croppedFile.path));
  }

  void _saveImage() {
    if (_image == null) return;
    setState(() => _isLoading = true);

    final gallery = context.read<GalleryProvider>();
    final galleryImage = GalleryImage(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      file: _image!,
      createdAt: DateTime.now(),
    );

    if (widget.editIndex != null) {
      gallery.replaceImage(widget.editIndex!, galleryImage);
    } else {
      gallery.addImage(galleryImage);
    }

    Navigator.pop(context);
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final genderTheme = theme.extension<GenderTheme>();

    return Scaffold(
      backgroundColor: genderTheme?.softBgColor,
      appBar: AppBar(
        title: Text(widget.editIndex != null ? 'Edit Image' : 'Add Image'),
        backgroundColor: theme.colorScheme.primary,
        foregroundColor: theme.colorScheme.onPrimary,
      ),
      body: SafeArea(
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              if (_image != null) ...[
                Expanded(
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Image.file(_image!),
                  ),
                ),
                _buildActionBar(),
              ] else ...[
                if (!_isLoading) ...[
                  const CircularProgressIndicator(),
                  const SizedBox(height: 20),
                  Text(
                    'Loading image...',
                    style: theme.textTheme.bodyLarge?.copyWith(
                      color: genderTheme?.accentColor,
                    ),
                  ),
                ],
              ],
              if (_isLoading) const LinearProgressIndicator(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildActionBar() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 12.0),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        children: [
          IconButton(
            icon: const Icon(Icons.cancel),
            color: Colors.red,
            onPressed: () => Navigator.pop(context),
          ),
          IconButton(
            icon: const Icon(Icons.check),
            color: Colors.green,
            onPressed: _isLoading ? null : _saveImage,
          ),
        ],
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';

class SplashScreen extends StatelessWidget {
  const SplashScreen({super.key});

  @override
  Widget build(BuildContext context) {
    Future.delayed(const Duration(seconds: 2), () {
      context.go('/login');
    });

    return const Scaffold(
      body: Center(child: Text('Gallery App', style: TextStyle(fontSize: 24))),
    );
  }
}
// utils/file_storage.dart
import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as Path;

Future<String> saveImagePermanently(File image) async {
  final directory = await getApplicationDocumentsDirectory();
  final filename = Path.basename(image.path);
  final permanentFile = File('${directory.path}/$filename');

  await image.copy(permanentFile.path);
  return permanentFile.path;
}
import 'package:flutter/material.dart';

class GenderBadge extends StatelessWidget {
  final String? gender;
  final double size;

  const GenderBadge({super.key, this.gender, this.size = 20});

  @override
  Widget build(BuildContext context) {
    // Determine color and icon based on gender
    final isFemale = gender == 'Female';
    final color = isFemale ? Colors.pink : Colors.blue;
    final icon = isFemale ? Icons.favorite : Icons.star;
    final iconColor = isFemale ? Colors.white : Colors.yellowAccent;

    return Container(
      padding: const EdgeInsets.all(6),
      decoration: BoxDecoration(
        color: color,
        shape: BoxShape.circle,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Icon(icon, size: size, color: iconColor),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:my_pixels/providers/auth_provider.dart';
import 'package:my_pixels/providers/gallery_provider.dart';
import 'package:my_pixels/providers/user_provider.dart';
import 'package:provider/provider.dart';
import 'package:my_pixels/core/app_themes.dart';

import 'package:my_pixels/routes/app_router.dart'; // Import this correctly

class AppEntry extends StatelessWidget {
  const AppEntry({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => AuthProvider()),
        ChangeNotifierProvider(create: (_) => UserProvider()),
        ChangeNotifierProvider(create: (_) => GalleryProvider()),
      ],
      child: Builder(
        builder: (context) {
          final gender = context.watch<UserProvider>().user?.gender ?? 'Male';
          return MaterialApp.router(
            title: 'Pixel Gallery',
            debugShowCheckedModeBanner: false,
            theme: AppThemes.lightTheme(gender),
            routerConfig: appRouter, // ✅ just use appRouter directly
          );
        },
      ),
    );
  }
}
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:my_pixels/providers/gallery_provider.dart';
import 'package:my_pixels/providers/user_provider.dart';
import 'package:provider/provider.dart';

import 'package:my_pixels/app.dart';

// main.dart
// main.dart
void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  final userProvider = UserProvider();
  final galleryProvider = GalleryProvider();

  // await userProvider.initialize();
  // await galleryProvider.loadImages();

  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider.value(value: userProvider),
        ChangeNotifierProvider.value(value: galleryProvider),
      ],
      child: const AppEntry(),
    ),
  );
}
